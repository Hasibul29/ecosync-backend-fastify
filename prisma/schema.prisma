// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Auth {
  id           String  @id @default(uuid())
  passwordHash String
  User         User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String? @unique
  OTP          OTP?
}

model User {
  id              String    @id @default(uuid())
  firstName       String
  lastName        String
  email           String    @unique
  role            Role      @relation(fields: [roleId], references: [id], onDelete: Restrict)
  roleId          String
  password        Auth?
  stsManager      STS?      @relation(fields: [stsId], references: [id], onDelete: SetNull)
  stsId           String?
  landfillManager Landfill? @relation(fields: [landfillId], references: [id], onDelete: SetNull)
  landfillId      String?
}

model Role {
  id          String       @id @default(uuid())
  name        String       @unique
  description String?
  permissions Permission[]
  User        User[]
}

model Permission {
  id          String  @id @default(uuid())
  name        String  @unique
  description String?
  roles       Role[]
}

model OTP {
  id         String   @id @default(uuid())
  code       String
  expiration DateTime
  Auth       Auth     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId     String   @unique
}

model Vehicle {
  id               String          @id @default(uuid())
  vehicleNumber    String          @unique
  vehicleType      String
  capacity         Float
  fuelCostLoaded   Float
  fuelCostUnloaded Float
  onService        Boolean         @default(true)
  sts              STS?            @relation(fields: [stsId], references: [id], onDelete: SetNull)
  stsId            String?
  STSEntry         STSEntry[]
  LandfillEntry    LandfillEntry[]
  TodaysFleet      TodaysFleet[]
}

model STS {
  id          String        @id @default(uuid())
  name        String
  wardNo      String        @unique
  latitude    Float
  longitude   Float
  capacity    Float
  Vehicle     Vehicle[]
  User        User[]
  STSEntry    STSEntry[]
  TodaysFleet TodaysFleet[]
}

model Landfill {
  id                  String          @id @default(uuid())
  name                String
  latitude            Float
  longitude           Float
  capacity            Float
  operationalTimespan String
  User                User[]
  LandfillEntry       LandfillEntry[]
}

model STSEntry {
  id            String   @id @default(uuid())
  sts           STS      @relation(fields: [stsId], references: [id], onDelete: SetDefault)
  stsId         String   @default("Deleted")
  vehicle       Vehicle  @relation(fields: [vehicleId], references: [id], onDelete: SetDefault)
  vehicleId     String   @default("Deleted")
  wasteVolume   Float
  arrivalTime   DateTime
  departureTime DateTime
}

model LandfillEntry {
  id            String   @id @default(uuid())
  landfill      Landfill @relation(fields: [landfillId], references: [id], onDelete: SetDefault)
  landfillId    String   @default("Deleted")
  vehicle       Vehicle  @relation(fields: [vehicleId], references: [id], onDelete: SetDefault)
  vehicleId     String   @default("Deleted")
  wasteVolume   Float
  arrivalTime   DateTime
  departureTime DateTime
}

// TodaysFleet will have the list of selected vehicles
model TodaysFleet {
  id       String    @id @default(uuid())
  date     String
  sts      STS       @relation(fields: [stsId], references: [id], onDelete: SetDefault)
  stsId    String    @default("Deleted")
  vehicles Vehicle[]

  @@unique([date, stsId])
}
