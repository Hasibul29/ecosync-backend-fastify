// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Auth {
  id           String  @id @default(uuid())
  passwordHash String
  User         User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String? @unique
  OTP          OTP?
}

model User {
  id         String  @id @default(uuid())
  firstName  String
  lastName   String
  email      String  @unique
  role       Role    @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     String
  password   Auth?
  stsManager STS?    @relation(fields: [stsId], references: [id], onDelete: Cascade)
  stsId      String?
}

model Role {
  id          String       @id @default(uuid())
  name        String       @unique
  description String?
  permissions Permission[]
  User        User[]
}

model Permission {
  id          String  @id @default(uuid())
  name        String  @unique
  description String?
  roles       Role[]
}

model OTP {
  id         String   @id @default(uuid())
  code       String
  expiration DateTime
  Auth       Auth     @relation(fields: [userId], references: [userId])
  userId     String   @unique
}

model Vehicle {
  id               String  @id @default(uuid())
  vehicleNumber    String  @unique
  vehicleType      String
  capacity         Decimal
  fuelCostLoaded   Decimal
  fuelCostUnloaded Decimal
  onService        Boolean @default(true)
  sts              STS?    @relation(fields: [stsId], references: [id], onDelete: Cascade)
  stsId            String?
}

model STS {
  id        String    @id @default(uuid())
  wardNo    String
  latitude  String
  longitude String
  capacity  Decimal
  Vehicle   Vehicle[]
  User      User[]
}
